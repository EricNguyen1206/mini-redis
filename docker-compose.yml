# Mini-Redis Microservices Architecture
# =====================================
# This docker-compose file orchestrates the Mini-Redis microservices with maximum flexibility:
#
# STANDALONE DEPLOYMENT:
# - mini-redis-core: Fully self-contained Redis-compatible server
#
# MONITORED DEPLOYMENT:
# - mini-redis-core + mini-redis-insight: Redis server with web monitoring
#
# TESTING DEPLOYMENT:
# - Add mini-redis-benchmark: Performance testing tools
#
# Each service can run independently and be added/removed without affecting others.

services:
  # ============================================================================
  # CORE SERVICE - Fully Standalone Redis-Compatible Server
  # ============================================================================
  # This service runs independently and provides complete Redis functionality.
  # No dependencies on other services. Can be used as a drop-in Redis replacement.

  mini-redis-core:
    build:
      context: ./services/mini-redis-core
      dockerfile: Dockerfile
    container_name: mini-redis-core
    ports:
      - "6380:6380"  # Redis protocol port - connect with any Redis client
    environment:
      - NODE_ENV=production
      - REDIS_PORT=6380
    networks:
      - mini-redis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "const net = require('net'); const client = net.connect(6380, 'localhost', () => { client.write('PING\\n'); client.on('data', () => { client.end(); process.exit(0); }); }); client.on('error', () => process.exit(1));"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ============================================================================
  # INSIGHT SERVICE - Optional Plug-and-Play Web Monitoring
  # ============================================================================
  # This service is completely optional and can be added to any running core service.
  # Provides web dashboard, real-time monitoring, and interactive command execution.
  # Gracefully handles cases where core service is unavailable.

  # COMMENTED OUT - Replaced with official RedisInsight
  # mini-redis-insight:
  #   build:
  #     context: ./services/mini-redis-insight
  #     dockerfile: Dockerfile
  #   container_name: mini-redis-insight
  #   ports:
  #     - "8080:8080"  # Web interface port
  #   environment:
  #     - NODE_ENV=production
  #     - HTTP_PORT=8080
  #     - REDIS_HOST=mini-redis-core
  #     - REDIS_PORT=6380
  #   networks:
  #     - mini-redis-network
  #   # NO depends_on - can start independently and connect when core is available
  #   restart: unless-stopped
  #   profiles:
  #     - insight  # Optional service - only starts when explicitly requested
  #   healthcheck:
  #     test: ["CMD", "node", "-e", "const http = require('http'); const req = http.request('http://localhost:8080/', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => process.exit(1)); req.end();"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 15s

  # ============================================================================
  # OFFICIAL REDISINSIGHT SERVICE - Redis Labs Web Monitoring Tool
  # ============================================================================
  # Official Redis monitoring and management tool with web interface
  # Provides comprehensive Redis database management and monitoring capabilities

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8080:5540"  # RedisInsight web interface port
    volumes:
      - redisinsight-data:/db
    networks:
      - mini-redis-network
    restart: unless-stopped
    profiles:
      - insight  # Optional service - only starts when explicitly requested

  # ============================================================================
  # BENCHMARK SERVICES - Optional Performance Testing Tools
  # ============================================================================
  # These services are completely optional and can test any running core service.
  # They will wait and retry if the core service is not immediately available.

  # COMMENTED OUT - Replaced with official memtier_benchmark
  # mini-redis-benchmark:
  #   build:
  #     context: ./services/mini-redis-benchmark
  #     dockerfile: Dockerfile
  #   container_name: mini-redis-benchmark
  #   environment:
  #     - REDIS_HOST=mini-redis-core
  #     - REDIS_PORT=6380
  #   networks:
  #     - mini-redis-network
  #   # NO depends_on - benchmarks will handle connection retries internally
  #   profiles:
  #     - benchmark
  #   command: ["node", "index.js", "basic"]

  # mini-redis-benchmark-stress:
  #   build:
  #     context: ./services/mini-redis-benchmark
  #     dockerfile: Dockerfile
  #   container_name: mini-redis-benchmark-stress
  #   environment:
  #     - REDIS_HOST=mini-redis-core
  #     - REDIS_PORT=6380
  #   networks:
  #     - mini-redis-network
  #   profiles:
  #     - stress
  #   command: ["node", "index.js", "stress", "--pool-size", "20"]

  # mini-redis-benchmark-pubsub:
  #   build:
  #     context: ./services/mini-redis-benchmark
  #     dockerfile: Dockerfile
  #   container_name: mini-redis-benchmark-pubsub
  #   environment:
  #     - REDIS_HOST=mini-redis-core
  #     - REDIS_PORT=6380
  #   networks:
  #     - mini-redis-network
  #   profiles:
  #     - pubsub
  #   command: ["node", "index.js", "pubsub", "--pool-size", "15"]

  # mini-redis-benchmark-all:
  #   build:
  #     context: ./services/mini-redis-benchmark
  #     dockerfile: Dockerfile
  #   container_name: mini-redis-benchmark-all
  #   environment:
  #     - REDIS_HOST=mini-redis-core
  #     - REDIS_PORT=6380
  #   networks:
  #     - mini-redis-network
  #   profiles:
  #     - benchmark-all
  #   command: ["node", "index.js", "all", "--pool-size", "25"]

  # ============================================================================
  # OFFICIAL MEMTIER BENCHMARK SERVICE - Redis Labs Benchmarking Tool
  # ============================================================================
  # Official Redis benchmarking tool for performance testing
  # Provides comprehensive Redis performance testing capabilities

  memtier-benchmark:
    image: redislabs/memtier_benchmark:latest
    container_name: memtier-benchmark
    networks:
      - mini-redis-network
    profiles:
      - benchmark
    command: [
      "--server=mini-redis-core",
      "--port=6380",
      "--protocol=redis",
      "--clients=10",
      "--threads=2",
      "--requests=1000",
      "--data-size=32",
      "--key-pattern=R:R",
      "--ratio=1:1",
      "--print-percentiles=50,90,95,99"
    ]

  # Stress test variant with higher load
  memtier-benchmark-stress:
    image: redislabs/memtier_benchmark:latest
    container_name: memtier-benchmark-stress
    networks:
      - mini-redis-network
    profiles:
      - stress
    command: [
      "--server=mini-redis-core",
      "--port=6380",
      "--protocol=redis",
      "--clients=50",
      "--threads=4",
      "--requests=10000",
      "--data-size=1024",
      "--key-pattern=R:R",
      "--ratio=1:1",
      "--print-percentiles=50,90,95,99,99.9"
    ]

  # Pipeline test variant
  memtier-benchmark-pipeline:
    image: redislabs/memtier_benchmark:latest
    container_name: memtier-benchmark-pipeline
    networks:
      - mini-redis-network
    profiles:
      - pipeline
    command: [
      "--server=mini-redis-core",
      "--port=6380",
      "--protocol=redis",
      "--clients=20",
      "--threads=2",
      "--requests=5000",
      "--data-size=64",
      "--pipeline=10",
      "--key-pattern=R:R",
      "--ratio=1:1",
      "--print-percentiles=50,90,95,99"
    ]

  # Redis CLI for manual testing
  redis-cli:
    image: redis:7-alpine
    container_name: redis-cli-client
    depends_on:
      - mini-redis-core
    networks:
      - mini-redis-network
    profiles:
      - cli
    stdin_open: true
    tty: true
    command: redis-cli -h mini-redis-core -p 6380

networks:
  mini-redis-network:
    driver: bridge

volumes:
  mini-redis-data:
    driver: local
  redisinsight-data:
    driver: local
